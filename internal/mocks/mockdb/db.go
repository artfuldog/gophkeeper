// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/db/db.go

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	pb "github.com/artfuldog/gophkeeper/internal/pb"
	db "github.com/artfuldog/gophkeeper/internal/server/db"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockDB) Clear(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", arg0)
}

// Clear indicates an expected call of Clear.
func (mr *MockDBMockRecorder) Clear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockDB)(nil).Clear), arg0)
}

// Connect mocks base method.
func (m *MockDB) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDBMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDB)(nil).Connect), arg0)
}

// ConnectAndSetup mocks base method.
func (m *MockDB) ConnectAndSetup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectAndSetup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectAndSetup indicates an expected call of ConnectAndSetup.
func (mr *MockDBMockRecorder) ConnectAndSetup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectAndSetup", reflect.TypeOf((*MockDB)(nil).ConnectAndSetup), arg0)
}

// CreateItem mocks base method.
func (m *MockDB) CreateItem(arg0 context.Context, arg1 db.Username, arg2 *pb.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockDBMockRecorder) CreateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockDB)(nil).CreateItem), arg0, arg1, arg2)
}

// CreateUser mocks base method.
func (m *MockDB) CreateUser(arg0 context.Context, arg1 *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDBMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDB)(nil).CreateUser), arg0, arg1)
}

// DeleteItem mocks base method.
func (m *MockDB) DeleteItem(ctx context.Context, username db.Username, itemID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", ctx, username, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockDBMockRecorder) DeleteItem(ctx, username, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockDB)(nil).DeleteItem), ctx, username, itemID)
}

// DeleteUserByName mocks base method.
func (m *MockDB) DeleteUserByName(arg0 context.Context, arg1 db.Username) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByName", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByName indicates an expected call of DeleteUserByName.
func (mr *MockDBMockRecorder) DeleteUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByName", reflect.TypeOf((*MockDB)(nil).DeleteUserByName), arg0, arg1)
}

// GetItemByNameAndType mocks base method.
func (m *MockDB) GetItemByNameAndType(arg0 context.Context, arg1 db.Username, arg2 db.ItemName, arg3 db.ItemType) (*pb.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemByNameAndType", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*pb.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemByNameAndType indicates an expected call of GetItemByNameAndType.
func (mr *MockDBMockRecorder) GetItemByNameAndType(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemByNameAndType", reflect.TypeOf((*MockDB)(nil).GetItemByNameAndType), arg0, arg1, arg2, arg3)
}

// GetItemHashByID mocks base method.
func (m *MockDB) GetItemHashByID(arg0 context.Context, arg1 int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemHashByID", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemHashByID indicates an expected call of GetItemHashByID.
func (mr *MockDBMockRecorder) GetItemHashByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemHashByID", reflect.TypeOf((*MockDB)(nil).GetItemHashByID), arg0, arg1)
}

// GetItemList mocks base method.
func (m *MockDB) GetItemList(arg0 context.Context, arg1 db.Username) ([]*pb.ItemShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemList", arg0, arg1)
	ret0, _ := ret[0].([]*pb.ItemShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemList indicates an expected call of GetItemList.
func (mr *MockDBMockRecorder) GetItemList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemList", reflect.TypeOf((*MockDB)(nil).GetItemList), arg0, arg1)
}

// GetItemsByID mocks base method.
func (m *MockDB) GetItemsByID(arg0 context.Context, arg1 db.Username, arg2 []int64) ([]*pb.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*pb.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsByID indicates an expected call of GetItemsByID.
func (mr *MockDBMockRecorder) GetItemsByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsByID", reflect.TypeOf((*MockDB)(nil).GetItemsByID), arg0, arg1, arg2)
}

// GetMaxSecretSize mocks base method.
func (m *MockDB) GetMaxSecretSize() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxSecretSize")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetMaxSecretSize indicates an expected call of GetMaxSecretSize.
func (mr *MockDBMockRecorder) GetMaxSecretSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxSecretSize", reflect.TypeOf((*MockDB)(nil).GetMaxSecretSize))
}

// GetUserAuthData mocks base method.
func (m *MockDB) GetUserAuthData(arg0 context.Context, arg1 db.Username) (db.Password, db.OTPKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAuthData", arg0, arg1)
	ret0, _ := ret[0].(db.Password)
	ret1, _ := ret[1].(db.OTPKey)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAuthData indicates an expected call of GetUserAuthData.
func (mr *MockDBMockRecorder) GetUserAuthData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAuthData", reflect.TypeOf((*MockDB)(nil).GetUserAuthData), arg0, arg1)
}

// GetUserByName mocks base method.
func (m *MockDB) GetUserByName(arg0 context.Context, arg1 db.Username) (*pb.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(*pb.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockDBMockRecorder) GetUserByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockDB)(nil).GetUserByName), arg0, arg1)
}

// GetUserEKey mocks base method.
func (m *MockDB) GetUserEKey(arg0 context.Context, arg1 db.Username) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserEKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserEKey indicates an expected call of GetUserEKey.
func (mr *MockDBMockRecorder) GetUserEKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserEKey", reflect.TypeOf((*MockDB)(nil).GetUserEKey), arg0, arg1)
}

// GetUserRevision mocks base method.
func (m *MockDB) GetUserRevision(arg0 context.Context, arg1 db.Username) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRevision", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRevision indicates an expected call of GetUserRevision.
func (mr *MockDBMockRecorder) GetUserRevision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRevision", reflect.TypeOf((*MockDB)(nil).GetUserRevision), arg0, arg1)
}

// Run mocks base method.
func (m *MockDB) Run(arg0 context.Context, arg1 db.CloseChannel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0, arg1)
}

// Run indicates an expected call of Run.
func (mr *MockDBMockRecorder) Run(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDB)(nil).Run), arg0, arg1)
}

// Setup mocks base method.
func (m *MockDB) Setup(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockDBMockRecorder) Setup(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockDB)(nil).Setup), arg0)
}

// UpdateItem mocks base method.
func (m *MockDB) UpdateItem(arg0 context.Context, arg1 db.Username, arg2 *pb.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockDBMockRecorder) UpdateItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockDB)(nil).UpdateItem), arg0, arg1, arg2)
}

// UpdateUser mocks base method.
func (m *MockDB) UpdateUser(arg0 context.Context, arg1 *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDBMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDB)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserSecrets mocks base method.
func (m *MockDB) UpdateUserSecrets(arg0 context.Context, arg1 *pb.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSecrets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSecrets indicates an expected call of UpdateUserSecrets.
func (mr *MockDBMockRecorder) UpdateUserSecrets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSecrets", reflect.TypeOf((*MockDB)(nil).UpdateUserSecrets), arg0, arg1)
}
