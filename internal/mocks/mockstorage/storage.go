// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/storage/storage.go

// Package mockstorage is a generated GoMock package.
package mockstorage

import (
	context "context"
	reflect "reflect"

	storage "github.com/artfuldog/gophkeeper/internal/client/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockS is a mock of S interface.
type MockS struct {
	ctrl     *gomock.Controller
	recorder *MockSMockRecorder
}

// MockSMockRecorder is the mock recorder for MockS.
type MockSMockRecorder struct {
	mock *MockS
}

// NewMockS creates a new mock instance.
func NewMockS(ctrl *gomock.Controller) *MockS {
	mock := &MockS{ctrl: ctrl}
	mock.recorder = &MockSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS) EXPECT() *MockSMockRecorder {
	return m.recorder
}

// ClearItems mocks base method.
func (m *MockS) ClearItems(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearItems", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearItems indicates an expected call of ClearItems.
func (mr *MockSMockRecorder) ClearItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearItems", reflect.TypeOf((*MockS)(nil).ClearItems), ctx)
}

// Connect mocks base method.
func (m *MockS) Connect(arg0 context.Context, arg1 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockSMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockS)(nil).Connect), arg0, arg1)
}

// CreateItems mocks base method.
func (m *MockS) CreateItems(arg0 context.Context, arg1 storage.Items) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItems", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItems indicates an expected call of CreateItems.
func (mr *MockSMockRecorder) CreateItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItems", reflect.TypeOf((*MockS)(nil).CreateItems), arg0, arg1)
}

// Delete mocks base method.
func (m *MockS) Delete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete.
func (mr *MockSMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockS)(nil).Delete))
}

// DeleteItems mocks base method.
func (m *MockS) DeleteItems(ctx context.Context, ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItems", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItems indicates an expected call of DeleteItems.
func (mr *MockSMockRecorder) DeleteItems(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItems", reflect.TypeOf((*MockS)(nil).DeleteItems), ctx, ids)
}

// GetItem mocks base method.
func (m *MockS) GetItem(ctx context.Context, itemName, itemType string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemName, itemType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockSMockRecorder) GetItem(ctx, itemName, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockS)(nil).GetItem), ctx, itemName, itemType)
}

// GetItemsList mocks base method.
func (m *MockS) GetItemsList(ctx context.Context) (storage.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsList", ctx)
	ret0, _ := ret[0].(storage.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsList indicates an expected call of GetItemsList.
func (mr *MockSMockRecorder) GetItemsList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsList", reflect.TypeOf((*MockS)(nil).GetItemsList), ctx)
}

// GetRevision mocks base method.
func (m *MockS) GetRevision(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockSMockRecorder) GetRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockS)(nil).GetRevision), arg0)
}

// SaveRevision mocks base method.
func (m *MockS) SaveRevision(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRevision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRevision indicates an expected call of SaveRevision.
func (mr *MockSMockRecorder) SaveRevision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRevision", reflect.TypeOf((*MockS)(nil).SaveRevision), arg0, arg1)
}

// UpdateItems mocks base method.
func (m *MockS) UpdateItems(ctx context.Context, items storage.Items) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItems", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItems indicates an expected call of UpdateItems.
func (mr *MockSMockRecorder) UpdateItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItems", reflect.TypeOf((*MockS)(nil).UpdateItems), ctx, items)
}

// MockExecutor is a mock of Executor interface.
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockExecutorMockRecorder
}

// MockExecutorMockRecorder is the mock recorder for MockExecutor.
type MockExecutorMockRecorder struct {
	mock *MockExecutor
}

// NewMockExecutor creates a new mock instance.
func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &MockExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutor) EXPECT() *MockExecutorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockExecutor) Connect(arg0 context.Context, arg1 chan<- struct{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockExecutorMockRecorder) Connect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockExecutor)(nil).Connect), arg0, arg1)
}

// Delete mocks base method.
func (m *MockExecutor) Delete() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete")
}

// Delete indicates an expected call of Delete.
func (mr *MockExecutorMockRecorder) Delete() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExecutor)(nil).Delete))
}

// MockStorekeeper is a mock of Storekeeper interface.
type MockStorekeeper struct {
	ctrl     *gomock.Controller
	recorder *MockStorekeeperMockRecorder
}

// MockStorekeeperMockRecorder is the mock recorder for MockStorekeeper.
type MockStorekeeperMockRecorder struct {
	mock *MockStorekeeper
}

// NewMockStorekeeper creates a new mock instance.
func NewMockStorekeeper(ctrl *gomock.Controller) *MockStorekeeper {
	mock := &MockStorekeeper{ctrl: ctrl}
	mock.recorder = &MockStorekeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorekeeper) EXPECT() *MockStorekeeperMockRecorder {
	return m.recorder
}

// ClearItems mocks base method.
func (m *MockStorekeeper) ClearItems(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearItems", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearItems indicates an expected call of ClearItems.
func (mr *MockStorekeeperMockRecorder) ClearItems(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearItems", reflect.TypeOf((*MockStorekeeper)(nil).ClearItems), ctx)
}

// CreateItems mocks base method.
func (m *MockStorekeeper) CreateItems(arg0 context.Context, arg1 storage.Items) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItems", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateItems indicates an expected call of CreateItems.
func (mr *MockStorekeeperMockRecorder) CreateItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItems", reflect.TypeOf((*MockStorekeeper)(nil).CreateItems), arg0, arg1)
}

// DeleteItems mocks base method.
func (m *MockStorekeeper) DeleteItems(ctx context.Context, ids []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItems", ctx, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteItems indicates an expected call of DeleteItems.
func (mr *MockStorekeeperMockRecorder) DeleteItems(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItems", reflect.TypeOf((*MockStorekeeper)(nil).DeleteItems), ctx, ids)
}

// GetItem mocks base method.
func (m *MockStorekeeper) GetItem(ctx context.Context, itemName, itemType string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, itemName, itemType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockStorekeeperMockRecorder) GetItem(ctx, itemName, itemType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockStorekeeper)(nil).GetItem), ctx, itemName, itemType)
}

// GetItemsList mocks base method.
func (m *MockStorekeeper) GetItemsList(ctx context.Context) (storage.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemsList", ctx)
	ret0, _ := ret[0].(storage.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemsList indicates an expected call of GetItemsList.
func (mr *MockStorekeeperMockRecorder) GetItemsList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemsList", reflect.TypeOf((*MockStorekeeper)(nil).GetItemsList), ctx)
}

// GetRevision mocks base method.
func (m *MockStorekeeper) GetRevision(arg0 context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevision", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRevision indicates an expected call of GetRevision.
func (mr *MockStorekeeperMockRecorder) GetRevision(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevision", reflect.TypeOf((*MockStorekeeper)(nil).GetRevision), arg0)
}

// SaveRevision mocks base method.
func (m *MockStorekeeper) SaveRevision(arg0 context.Context, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveRevision", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveRevision indicates an expected call of SaveRevision.
func (mr *MockStorekeeperMockRecorder) SaveRevision(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveRevision", reflect.TypeOf((*MockStorekeeper)(nil).SaveRevision), arg0, arg1)
}

// UpdateItems mocks base method.
func (m *MockStorekeeper) UpdateItems(ctx context.Context, items storage.Items) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItems", ctx, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItems indicates an expected call of UpdateItems.
func (mr *MockStorekeeperMockRecorder) UpdateItems(ctx, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItems", reflect.TypeOf((*MockStorekeeper)(nil).UpdateItems), ctx, items)
}
