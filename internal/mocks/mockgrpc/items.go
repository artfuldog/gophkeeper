// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pb/items_grpc.pb.go

// Package mockgrpc is a generated GoMock package.
package mockgrpc

import (
	context "context"
	reflect "reflect"

	pb "github.com/artfuldog/gophkeeper/internal/pb"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockItemsClient is a mock of ItemsClient interface.
type MockItemsClient struct {
	ctrl     *gomock.Controller
	recorder *MockItemsClientMockRecorder
}

// MockItemsClientMockRecorder is the mock recorder for MockItemsClient.
type MockItemsClientMockRecorder struct {
	mock *MockItemsClient
}

// NewMockItemsClient creates a new mock instance.
func NewMockItemsClient(ctrl *gomock.Controller) *MockItemsClient {
	mock := &MockItemsClient{ctrl: ctrl}
	mock.recorder = &MockItemsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsClient) EXPECT() *MockItemsClientMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemsClient) CreateItem(ctx context.Context, in *pb.CreateItemRequest, opts ...grpc.CallOption) (*pb.CreateItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateItem", varargs...)
	ret0, _ := ret[0].(*pb.CreateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemsClientMockRecorder) CreateItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemsClient)(nil).CreateItem), varargs...)
}

// DeleteItem mocks base method.
func (m *MockItemsClient) DeleteItem(ctx context.Context, in *pb.DeleteItemRequest, opts ...grpc.CallOption) (*pb.DeleteItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteItem", varargs...)
	ret0, _ := ret[0].(*pb.DeleteItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemsClientMockRecorder) DeleteItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemsClient)(nil).DeleteItem), varargs...)
}

// GetItem mocks base method.
func (m *MockItemsClient) GetItem(ctx context.Context, in *pb.GetItemRequest, opts ...grpc.CallOption) (*pb.GetItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItem", varargs...)
	ret0, _ := ret[0].(*pb.GetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemsClientMockRecorder) GetItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemsClient)(nil).GetItem), varargs...)
}

// GetItemList mocks base method.
func (m *MockItemsClient) GetItemList(ctx context.Context, in *pb.GetItemListRequest, opts ...grpc.CallOption) (*pb.GetItemListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemList", varargs...)
	ret0, _ := ret[0].(*pb.GetItemListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemList indicates an expected call of GetItemList.
func (mr *MockItemsClientMockRecorder) GetItemList(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemList", reflect.TypeOf((*MockItemsClient)(nil).GetItemList), varargs...)
}

// UpdateItem mocks base method.
func (m *MockItemsClient) UpdateItem(ctx context.Context, in *pb.UpdateItemRequest, opts ...grpc.CallOption) (*pb.UpdateItemResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(*pb.UpdateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemsClientMockRecorder) UpdateItem(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemsClient)(nil).UpdateItem), varargs...)
}

// MockItemsServer is a mock of ItemsServer interface.
type MockItemsServer struct {
	ctrl     *gomock.Controller
	recorder *MockItemsServerMockRecorder
}

// MockItemsServerMockRecorder is the mock recorder for MockItemsServer.
type MockItemsServerMockRecorder struct {
	mock *MockItemsServer
}

// NewMockItemsServer creates a new mock instance.
func NewMockItemsServer(ctrl *gomock.Controller) *MockItemsServer {
	mock := &MockItemsServer{ctrl: ctrl}
	mock.recorder = &MockItemsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemsServer) EXPECT() *MockItemsServerMockRecorder {
	return m.recorder
}

// CreateItem mocks base method.
func (m *MockItemsServer) CreateItem(arg0 context.Context, arg1 *pb.CreateItemRequest) (*pb.CreateItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateItem", arg0, arg1)
	ret0, _ := ret[0].(*pb.CreateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateItem indicates an expected call of CreateItem.
func (mr *MockItemsServerMockRecorder) CreateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateItem", reflect.TypeOf((*MockItemsServer)(nil).CreateItem), arg0, arg1)
}

// DeleteItem mocks base method.
func (m *MockItemsServer) DeleteItem(arg0 context.Context, arg1 *pb.DeleteItemRequest) (*pb.DeleteItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteItem", arg0, arg1)
	ret0, _ := ret[0].(*pb.DeleteItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteItem indicates an expected call of DeleteItem.
func (mr *MockItemsServerMockRecorder) DeleteItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteItem", reflect.TypeOf((*MockItemsServer)(nil).DeleteItem), arg0, arg1)
}

// GetItem mocks base method.
func (m *MockItemsServer) GetItem(arg0 context.Context, arg1 *pb.GetItemRequest) (*pb.GetItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockItemsServerMockRecorder) GetItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockItemsServer)(nil).GetItem), arg0, arg1)
}

// GetItemList mocks base method.
func (m *MockItemsServer) GetItemList(arg0 context.Context, arg1 *pb.GetItemListRequest) (*pb.GetItemListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemList", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetItemListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemList indicates an expected call of GetItemList.
func (mr *MockItemsServerMockRecorder) GetItemList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemList", reflect.TypeOf((*MockItemsServer)(nil).GetItemList), arg0, arg1)
}

// UpdateItem mocks base method.
func (m *MockItemsServer) UpdateItem(arg0 context.Context, arg1 *pb.UpdateItemRequest) (*pb.UpdateItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", arg0, arg1)
	ret0, _ := ret[0].(*pb.UpdateItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockItemsServerMockRecorder) UpdateItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockItemsServer)(nil).UpdateItem), arg0, arg1)
}

// mustEmbedUnimplementedItemsServer mocks base method.
func (m *MockItemsServer) mustEmbedUnimplementedItemsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedItemsServer")
}

// mustEmbedUnimplementedItemsServer indicates an expected call of mustEmbedUnimplementedItemsServer.
func (mr *MockItemsServerMockRecorder) mustEmbedUnimplementedItemsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedItemsServer", reflect.TypeOf((*MockItemsServer)(nil).mustEmbedUnimplementedItemsServer))
}

// MockUnsafeItemsServer is a mock of UnsafeItemsServer interface.
type MockUnsafeItemsServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeItemsServerMockRecorder
}

// MockUnsafeItemsServerMockRecorder is the mock recorder for MockUnsafeItemsServer.
type MockUnsafeItemsServerMockRecorder struct {
	mock *MockUnsafeItemsServer
}

// NewMockUnsafeItemsServer creates a new mock instance.
func NewMockUnsafeItemsServer(ctrl *gomock.Controller) *MockUnsafeItemsServer {
	mock := &MockUnsafeItemsServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeItemsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeItemsServer) EXPECT() *MockUnsafeItemsServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedItemsServer mocks base method.
func (m *MockUnsafeItemsServer) mustEmbedUnimplementedItemsServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedItemsServer")
}

// mustEmbedUnimplementedItemsServer indicates an expected call of mustEmbedUnimplementedItemsServer.
func (mr *MockUnsafeItemsServerMockRecorder) mustEmbedUnimplementedItemsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedItemsServer", reflect.TypeOf((*MockUnsafeItemsServer)(nil).mustEmbedUnimplementedItemsServer))
}
