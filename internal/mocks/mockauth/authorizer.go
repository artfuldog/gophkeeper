// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/authorizer/authorizer.go

// Package mockauth is a generated GoMock package.
package mockauth

import (
	reflect "reflect"

	authorizer "github.com/artfuldog/gophkeeper/internal/server/authorizer"
	gomock "github.com/golang/mock/gomock"
)

// MockA is a mock of A interface.
type MockA struct {
	ctrl     *gomock.Controller
	recorder *MockAMockRecorder
}

// MockAMockRecorder is the mock recorder for MockA.
type MockAMockRecorder struct {
	mock *MockA
}

// NewMockA creates a new mock instance.
func NewMockA(ctrl *gomock.Controller) *MockA {
	mock := &MockA{ctrl: ctrl}
	mock.recorder = &MockAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockA) EXPECT() *MockAMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockA) CreateToken(fields authorizer.AuthFields) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", fields)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAMockRecorder) CreateToken(fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockA)(nil).CreateToken), fields)
}

// VerifyToken mocks base method.
func (m *MockA) VerifyToken(token string, fields authorizer.AuthFields) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyToken", token, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyToken indicates an expected call of VerifyToken.
func (mr *MockAMockRecorder) VerifyToken(token, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyToken", reflect.TypeOf((*MockA)(nil).VerifyToken), token, fields)
}
